@page "/login"
@using BlazorWebAppAuthentication.DAL
@using BlazorWebAppAuthentication.Models.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject Context context
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="mb-3 text-center flex-column">
                <img src="/Login.jpg" style="max-height:5rem;" />
                <h3>LOGIN</h3>
            </div>

            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username"></InputText>
                <ValidationMessage For="() => Model.Username"></ValidationMessage>
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password"></InputText>
                <ValidationMessage For="() => Model.Password"></ValidationMessage>
            </div>

            <div class="mb-3">
                <span class="text-danger">@errorMessage</span>
            </div>

            <div class="mb-3 d-grid gap-2">
                <button class="btn btn-primary" type="submit">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModels Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var userAccount = context.UserAccount
        .Where(x => x.UserName == Model.Username).FirstOrDefault();

        if (userAccount is null || userAccount.Password != Model.Password)
        {
            errorMessage = "Usuario o Password Invalido";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Username),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await HttpContext?.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
        navigationManager.NavigateTo("/");
    }
}
